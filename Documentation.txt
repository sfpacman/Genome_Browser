
Front End:
The frontend is divided into two parts: HTML and CGI scripts. In HTML folder, the static webpages are stored (index page) along with multimedia objects. In the CGI folder the dynamic webpage is be stored in the form of Python script and HTML template (jinja2). Python script will access API functions from the middle layer folder to retrieve and process information based on the user input query from the index page. Both HTML and CSS markup are used for all of the webpage. Particularly, bootstrap is used extensively for producing mobile friendly webpage. 

HTML:
 The Index webpage is stored under this folder in which Javascript (Jquery) enables displaying summary table based on user input.  

CGI:
 Instead of printing html code, a template module (JinJa2) is used to produce complex HTML page for the dynamic webpage (details page, summary table on the details page). All template HTML files are under template folder under CGI. The code for the webpage is HTML and is in the file index.html, the CGI uses a Python script, the codon table CGI is in the file table.py
Three python scripts are developed for displaying data: 
-summary.py is used for making the summary table on the list index in which users can access detail information through the link:
-summary.py uses find API.find_summary to retrieve information based on user input data (gene name[DNA/ID] , protein product[protein], gene accession[gc], chromosome location[cl] )
-compute_function.py is a collection of utility functions to display data based on the API functions results.

Markup is a function that insert a particular tag into a string which is good for highlighting sequencing region or indicating restriction enzyme site used in:
- codon_usage is an object that can store and display codon usage analysis in a html table form in the combination of table.html. 

The details.py is used for making details.html and allow user to highlight coding region, get the restriction enzyme site of the selected sequence and calculate the codon usage analysis which will access the following API function:
-details.py used  findAPI.find_exon() to get a position list of exon boundary location  
-details.py used both Overallfq.py and codon_freq.py to calculate the codon usage frequency in a python dictionary form.
 -details.py used REnz.py to get a position list of restriction enzyme size based on the input sequence 

The dummydata.py is used for producing phony data to test the above-mentioned functions by supply corresponding data. 





Database:
 
Figure 1: Schema for the Chromosome 8
Table description for database:
-- Table sc001.Gene
  Protein_product CHAR(50) NOT NULL,
  Genbank_Accession VARCHAR(10) NOT NULL,
  Chromosome_location VARCHAR(20) NOT NULL,
  Gene_name VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Genbank_Accession`)
  
-- Table sc001.Sequence
  DNA_sequence LONGTEXT NOT NULL,
  Amino_Acid_Seq MEDIUMTEXT NOT NULL,
  Gene_Identifier VARCHAR(45) NOT NULL,
  INDEX `fk_Sequence_Gene_idx` (Gene_Identifier ASC),
##Gene identifier is the Genbank accession number as its filled in all the records 
 PRIMARY KEY (Gene_Identifier),
    FOREIGN KEY (Gene_Identifier) 
    
-- Table `sc001`.`Exon`
  Exon_Start VARCHAR(45) NOT NULL,
  Exon_End VARCHAR(45) NOT NULL,
##Sequence_Gene_Identifier is the Genbank accession number as its filled in all the records 
  Sequence_Gene_Identifier VARCHAR(45) NOT NULL,
  ## to ensure multiple exons are still linked to the right gene
  exon_ID INT NOT NULL AUTO_INCREMENT,
## Foreign key to link to Gene
  INDEX `fk_Exon_Sequence1_idx` (`Sequence_Gene_Identifier` ASC), 
PRIMARY KEY (exon_ID))

-- Table sc001.Restriction_Enzyme
  idRestriction_Enzyme VARCHAR(7) NOT NULL,
  Recognition_seq MEDIUMTEXT NOT NULL,
## stand-alone table so primary key is the restriction enzyme ID
  PRIMARY KEY (`idRestriction_Enzyme`)
  
Parsing:
The parsing code uses functions imported from the Biopython’s module Genbank and iterates through each record one at a time extracting all of the wanted pieces of information to a dictionary. At the end of the parsing the dictionary is inserted into a main list with each of the relevant pieces of information associated with one gene. A separate dictionary was created for the restriction enzymes as they aren’t dependent on the genes. 
Populating:
MySQL connector driver was used to connect the MySQL statements to the database to populate with Python. The parsed entries in the list are assigned to values to input into the SQL statements to then populate the database in the correct tables and columns with the appropriate records for each gene. The python coding for the exon table was adjusted to ensure the allowance for multiple entries. 



Middle layer:
I divided the middle layer into two sections: the data access routine and the business logic. Each contains different APIs that woud be used to retrive data from the database or create calculations (such as the codon usage frequency)

Data access routine:
All the following functions were created with MYSQL connector driver to connect the MYSQL statements from the database to Python scripts. Data from different tables were extracted to make sure that all the different information was retrieved.
the get_DNAseq function was created to retrieve the DNA sequence  form the database and print it out. This can be used if only the DNA sequence was needed for the query.
get_AAseq function instead retrieves both DNA and amino acid sequence from the database's table Sequence. By using this API it would retrieve both sequences at the same time.
get_exon function extracts the exon start and end position from the database.
get_genedetail function instead extracts the protein product, chromosome location and gene name.

get_codon_freq function was created to extract the codon frequency of a given sequence. default dictionary was imported form collections  A string with all the possible codons was formed and start and end codons were also included. The frequencies were inserted inside a dictionary to allow easy visualisation and to prevent ZeroDivisionError to occur, I stated that it would give a "0" result. The function was also used to calculate the overall codon frequency by using a MYSQL connector driver and the results were stored in the file codon_freq_DNA.txt

For the restriction enzymes sites, three different functions were created, each for the different enzymes. For BamHI and EcoRI, Biopython was used and Bio.Restriction used to search for the different enzymes cutting sites on the sequence (functions find_BamHi and find_EcoRi). For find_BsuMi function I used regular expression to find first the restriction site and then the position of the cut

Business logic:
MYSQL connector driver was used to connect the MYSQL statements from the database to the Python scripts. In each function, the variables from the database were linked with the one from the website to ensure the correct extraction of the data.  
find_all function retrieves GneBank accession, name of the gene, protein product, chromosome location and DNA sequence from the database depending on the input of the website.
find_summary and find_exon and find_AAseq functions had similar structure to find_all function.
